openapi: 3.0.3
info:
  title: "CatalogKMP API v2.0"
  description: "RESTful API for the CatalogKMP e-commerce platform, including all features for Phase 2 (Community & Specialization)."
  version: "2.0.0"
servers:
  - url: http://localhost:8080
    description: Local Development Server

tags:
  - name: Authentication
    description: "Endpoints for user registration and login."
  - name: Public Catalog
    description: "Public-facing endpoints for Browse products, categories, reviews, and questions."
  - name: Account Management
    description: "(Authenticated) Endpoints for managing user profiles and addresses."
  - name: Shopping Cart & Orders
    description: "(Authenticated) Endpoints for cart management, checkout, and order history."
  - name: Social Interaction
    description: "(Authenticated) Endpoints for posting reviews and questions."
  - name: Administration
    description: "(Admin Role Required) Endpoints for managing products, categories, suppliers, and answering questions."

paths:
  # --- Authentication ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: "Register a new user with the 'CLIENT' role."
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/RegisterRequest' } }
      responses:
        '201':
          description: "User created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '409': { $ref: '#/components/responses/Conflict' }

  /auth/login:
    post:
      tags: [Authentication]
      summary: "Login to obtain a JWT."
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/LoginRequest' } }
      responses:
        '200':
          description: "Login successful. Returns a JWT and the user's role."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string, description: "JWT for authentication." }
                  role: { type: string, description: "User role (e.g., CLIENT or ADMIN)." }
        '401': { $ref: '#/components/responses/Unauthorized' }


  # --- Public Catalog ---
  /products:
    get:
      tags: [Public Catalog]
      summary: "Get the list of all products."
      responses:
        '200':
          description: "A list of products."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Product' } } }

  /products/{id}:
    get:
      tags: [Public Catalog]
      summary: "Get details for a specific product."
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: "A single product."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Product' } }
        '404': { $ref: '#/components/responses/NotFound' }

  /products/{id}/reviews:
    get:
      tags: [Public Catalog]
      summary: "Get all reviews for a specific product."
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: "A list of product reviews."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ProductReview' } } }

  /products/{id}/questions:
    get:
      tags: [Public Catalog]
      summary: "Get all questions and answers for a specific product."
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: "A list of product questions."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ProductQuestion' } } }

  /categories:
    get:
      tags: [Public Catalog]
      summary: "Get the list of all product categories."
      responses:
        '200':
          description: "A list of categories."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Category' } } }

  # --- Account Management ---
  /users/me:
    get:
      tags: [Account Management]
      summary: "Get the authenticated user's full profile, including addresses."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "The user's profile."
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '401': { $ref: '#/components/responses/Unauthorized' }
    put:
      tags: [Account Management]
      summary: "Update the authenticated user's profile information."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/UserProfileUpdateRequest' } }
      responses:
        '200': { description: "Profile updated successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  /users/me/addresses:
    get:
      tags: [Account Management]
      summary: "List the user's shipping addresses."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of the user's addresses."
          content:
            application/json: { type: array, items: { $ref: '#/components/schemas/Address' } }
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [Account Management]
      summary: "Add a new address for the user."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddressRequest' } }
      responses:
        '201':
          description: "Address created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Address' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /users/me/addresses/{id}:
    put:
      tags: [Account Management]
      summary: "Modify an existing address."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddressRequest' } }
      responses:
        '200': { description: "Address updated successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Account Management]
      summary: "Delete an address."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '204': { description: "Address deleted successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  # --- Shopping Cart & Orders ---
  /cart:
    get:
      tags: [Shopping Cart & Orders]
      summary: Get the content of the authenticated user's cart.
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: Cart content.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /orders/checkout:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Creates an order from the cart and returns a payment redirect URL."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CheckoutRequest' } }
      responses:
        '201':
          description: "Order created successfully. The response contains the URL to redirect the user for payment."
          content:
            application/json:
              schema:
                type: object
                properties:
                  init_point: { type: string, format: url, description: "URL to redirect the user to complete the payment." }
        '400': { description: "Cart is empty or address ID is missing." }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }

  /orders:
    get:
      tags: [Shopping Cart & Orders]
      summary: "Get the authenticated user's order history."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of orders."
          content:
            application/json: { type: array, items: { $ref: '#/components/schemas/Order' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /orders/{id}:
    get:
      tags: [Shopping Cart & Orders]
      summary: "View details of a specific order."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: "The requested order."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Order' } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

  # --- Social Interaction ---
  /products/{id}/reviews:
    post:
      tags: [Social Interaction]
      summary: "Post a new review for a product."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/ReviewRequest' } }
      responses:
        '201':
          description: "Review created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ProductReview' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /products/{id}/questions:
    post:
      tags: [Social Interaction]
      summary: "Post a new question about a product."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/QuestionRequest' } }
      responses:
        '201':
          description: "Question posted successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ProductQuestion' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # --- Administration ---
  /admin/suppliers:
    get:
      tags: [Administration]
      summary: "Get all suppliers."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of all suppliers."
          content:
            application/json: { type: array, items: { $ref: '#/components/schemas/Supplier' } }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      tags: [Administration]
      summary: "Create a new supplier."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CreateSupplierRequest' } }
      responses:
        '201':
          description: "Supplier created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Supplier' } }
        '403': { $ref: '#/components/responses/Forbidden' }

  /admin/suppliers/{id}:
    get:
      tags: [Administration]
      summary: "Get a supplier by ID."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '200':
          description: "The requested supplier."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Supplier' } }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Administration]
      summary: "Update an existing supplier."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/Supplier' } }
      responses:
        '200': { description: "Supplier updated successfully." }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Administration]
      summary: "Delete a supplier."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '204': { description: "Supplier deleted successfully." }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /admin/questions/{questionId}/answer:
    post:
      tags: [Administration]
      summary: "Answer a customer's question."
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: questionId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AnswerRequest' } }
      responses:
        '200':
          description: "Answer posted successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ProductQuestion' } }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

# ===================================================================
# Reusable Components
# ===================================================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: "Authentication information is missing or invalid."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    Forbidden:
      description: "Access denied (role is not sufficient)."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    NotFound:
      description: "The specified resource was not found."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    Conflict:
      description: "The request could not be completed due to a conflict with the current state of the resource."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  schemas:
    ErrorResponse:
      type: object
      properties:
        message: { type: string }

    # --- User & Address Schemas ---
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string, nullable: true }
        role: { type: string, enum: [CLIENT, ADMIN, RESELLER] }
        addresses: { type: array, items: { $ref: '#/components/schemas/Address' } }
    RegisterRequest:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password, minLength: 6 }
        firstName: { type: string }
        lastName: { type: string }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    UserProfileUpdateRequest:
      type: object
      properties:
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string, nullable: true }
    Address:
      type: object
      properties:
        id: { type: string, format: uuid }
        alias: { type: string, description: "e.g., Home, Office" }
        street: { type: string }
        number: { type: string }
        postalCode: { type: string }
        city: { type: string }
        state: { type: string }
        isDefault: { type: boolean }
    AddressRequest:
      type: object
      required: [alias, street, number, postalCode, city, state]
      properties:
        alias: { type: string }
        street: { type: string }
        number: { type: string }
        postalCode: { type: string }
        city: { type: string }
        state: { type: string }
        isDefault: { type: boolean, default: false }

    # --- Product & Category Schemas ---
    Product:
      type: object
      properties:
        id: { type: string, format: uuid }
        sku: { type: string }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        salePrice: { type: number, format: double, nullable: true }
        mainImageUrl: { type: string, format: url }
        additionalImageUrls: { type: array, items: { type: string, format: url } }
        categoryId: { type: string }
        currentStock: { type: integer }
        weightKg: { type: number, format: double, nullable: true }
        averageRating: { type: number, format: double }
        reviewCount: { type: integer }
    Category:
      type: object
      required: [id, name]
      properties:
        id: { type: string }
        name: { type: string }
        imageUrl: { type: string, format: url, nullable: true }

    # --- Supplier Schemas ---
    Supplier:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        contactPerson: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        email: { type: string, nullable: true }
        cbu: { type: string, nullable: true }
        aliasCbu: { type: string, nullable: true }
        notes: { type: string, nullable: true }
    CreateSupplierRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }
        contactPerson: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        email: { type: string, nullable: true }
        cbu: { type: string, nullable: true }
        aliasCbu: { type: string, nullable: true }
        notes: { type: string, nullable: true }

    # --- Order & Cart Schemas ---
    ShoppingCart:
      type: object
      properties:
        items: { type: array, items: { $ref: '#/components/schemas/CartItemRequest' } }
    CartItemRequest:
      type: object
      required: [productId, cantidad]
      properties:
        productId: { type: string }
        cantidad: { type: integer, minimum: 1 }
    Order:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        orderDate: { type: integer, format: int64, description: "UNIX Timestamp" }
        status: { type: string, enum: [PENDING_PAYMENT, PAID, PREPARING, SHIPPED, DELIVERED, CANCELED] }
        total: { type: number, format: double }
        shippingAddress: { $ref: '#/components/schemas/Address' }
        paymentMethod: { type: string }
        shippingMethod: { type: string }
        mpPreferenceId: { type: string, nullable: true }
        items: { type: array, items: { $ref: '#/components/schemas/OrderItem' } }
    OrderItem:
      type: object
      properties:
        productId: { type: string }
        productName: { type: string }
        quantity: { type: integer }
        unitPrice: { type: number, format: double }
    CheckoutRequest:
      type: object
      required: [addressId]
      properties:
        addressId: { type: string, description: "The ID of the address to ship to." }

    # --- Social Schemas ---
    ProductReview:
      type: object
      properties:
        id: { type: string, format: uuid }
        productId: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        userName: { type: string }
        rating: { type: integer, minimum: 1, maximum: 5 }
        title: { type: string }
        comment: { type: string }
        photoUrls: { type: array, items: { type: string, format: url } }
        date: { type: integer, format: int64 }
    ReviewRequest:
      type: object
      required: [rating, title, comment]
      properties:
        rating: { type: integer, minimum: 1, maximum: 5 }
        title: { type: string }
        comment: { type: string }
        photoUrls: { type: array, items: { type: string, format: url } }
    ProductQuestion:
      type: object
      properties:
        id: { type: string, format: uuid }
        productId: { type: string, format: uuid }
        userId: { type: string, format:uuid }
        userName: { type: string }
        questionText: { type: string }
        date: { type: integer, format: int64 }
        answer: { $ref: '#/components/schemas/QuestionAnswer' }
    QuestionAnswer:
      type: object
      properties:
        answerText: { type: string }
        date: { type: integer, format: int64 }
    QuestionRequest:
      type: object
      required: [questionText]
      properties:
        questionText: { type: string }
    AnswerRequest:
      type: object
      required: [answerText]
      properties:
        answerText: { type: string }