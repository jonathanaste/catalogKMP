openapi: 3.0.3
info:
  title: "La Botica - Catalog API"
  description: "RESTful API to manage the catalog, suppliers, users, and shopping flow for a large-scale e-commerce application."
  version: "1.3.0"
servers:
  - url: http://localhost:8080
    description: Local Development Server

tags:
  - name: Authentication
    description: Endpoints for user registration and login.
  - name: Public Catalog
    description: Public-facing endpoints for Browse products and categories.
  - name: Admin - Products
    description: (Admin) Full CRUD for product management.
  - name: Admin - Categories
    description: (Admin) Full CRUD for category management.
  - name: Admin - Suppliers
    description: (Admin) Full CRUD for supplier management.
  - name: Shopping Cart
    description: (Authenticated User) Endpoints for shopping cart management.
  - name: Orders
    description: (Authenticated User) Endpoints for checkout and order history.

paths:
  # --- Authentication ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user with the 'CLIENT' role.
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/RegisterRequest' } }
      responses:
        '201':
          description: User created successfully.
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '409':
          description: Email is already in use.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login to obtain a JWT.
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/LoginRequest' } }
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string, description: "JWT for authentication." }
                  role: { type: string, description: "User role (CLIENTE or ADMIN)." }
        '401':
          description: Invalid email or password.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  # --- Public Catalog ---
  /categories:
    get:
      tags: [Public Catalog]
      summary: Get the list of all product categories.
      responses:
        '200':
          description: A list of categories.
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Category' } } }

  /products:
    get:
      tags: [Public Catalog]
      summary: Get the list of all products.
      responses:
        '200':
          description: A list of products with their nested category.
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ProductResponse' } } }

  # --- Admin ---
  /admin/products:
    post:
      tags: [Admin - Products]
      summary: Create a new product.
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/ProductRequest' } }
      responses:
        '201': { description: "Product created.", content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } } }
        '403': { $ref: '#/components/responses/Forbidden' }

  /admin/products/{id}:
    put:
      tags: [Admin - Products]
      summary: Update an existing product.
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/Product' } }
      responses:
        '200': { description: "Product updated successfully." }
        '404': { $ref: '#/components/responses/NotFound' }
        '403': { $ref: '#/components/responses/Forbidden' }
    delete:
      tags: [Admin - Products]
      summary: Delete a product.
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      responses:
        '204': { description: "Product deleted successfully." }
        '404': { $ref: '#/components/responses/NotFound' }
        '403': { $ref: '#/components/responses/Forbidden' }

  /admin/categories:
    post:
      tags: [Admin - Categories]
      summary: Create a new category.
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CategoryRequest' } }
      responses:
        '201': { description: "Category created.", content: { application/json: { schema: { $ref: '#/components/schemas/Category' } } } }
        '409': { description: "A category with this name already exists." }
        '403': { $ref: '#/components/responses/Forbidden' }

  /admin/categories/{id}:
    put:
      tags: [Admin - Categories]
      summary: Update an existing category.
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, description: "The category slug ID" } }
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/Category' } }
      responses:
        '200': { description: "Category updated successfully." }
        '404': { $ref: '#/components/responses/NotFound' }
        '403': { $ref: '#/components/responses/Forbidden' }
    delete:
      tags: [Admin - Categories]
      summary: Delete a category.
      security: [ { "BearerAuth": [] } ]
      parameters:
        - { name: id, in: path, required: true, schema: { type: string, description: "The category slug ID" } }
      responses:
        '204': { description: "Category deleted successfully." }
        '404': { $ref: '#/components/responses/NotFound' }
        '403': { $ref: '#/components/responses/Forbidden' }

  # Suppliers routes are omitted for brevity, but would follow the same pattern as products/categories

  # --- Shopping Cart ---
  /cart:
    get:
      tags: [Shopping Cart]
      summary: Get the content of the authenticated user's cart.
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: Cart content.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } }
    delete:
      tags: [Shopping Cart]
      summary: Empty the authenticated user's cart.
      security: [ { "BearerAuth": [] } ]
      responses:
        '204': { description: "Cart emptied successfully." }

  /cart/add:
    post:
      tags: [Shopping Cart]
      summary: Add an item to the cart or increment its quantity.
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CartItemRequest' } }
      responses:
        '200':
          description: Updated cart.
          content:
            application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } }

  # --- Orders ---
  /orders/checkout:
    post:
      tags: [Orders]
      summary: Creates a new order from the user's cart and empties it.
      security: [ { "BearerAuth": [] } ]
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json: { schema: { $ref: '#/components/schemas/Order' } }
        '400': { description: "Cart is empty." }
        '409': { description: "Conflict, e.g., insufficient stock." }

  /orders:
    get:
      tags: [Orders]
      summary: Get the authenticated user's order history.
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: List of orders.
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Order' } } }

# ===================================================================
# SECCIÓN DE COMPONENTES REUTILIZABLES
# Es crucial que esta sección esté presente y correctamente indentada
# ===================================================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Enter JWT token with 'Bearer ' prefix. e.g. 'Bearer ey...'"

  # AQUI ESTÁN LAS DEFINICIONES QUE FALTABAN
  responses:
    Forbidden:
      description: "Access denied (role is not ADMIN)."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    NotFound:
      description: "Resource not found."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  schemas:
    ErrorResponse:
      type: object
      properties:
        message: { type: string }
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, enum: [CLIENTE, ADMIN] }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    RegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
        name: { type: string }

    Category:
      type: object
      required: [id, name]
      properties:
        id: { type: string, description: "Unique slug-like identifier." }
        name: { type: string }
        imageUrl: { type: string, format: url, nullable: true }
    CategoryRequest:
      type: object
      required: [name]
      properties:
        name: { type: string }
        imageUrl: { type: string, format: url, nullable: true }

    Product:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        mainImageUrl: { type: string, format: url }
        categoryId: { type: string }
        stockQuantity: { type: integer }
        supplierId: { type: string, nullable: true }
        costPrice: { type: number, format: double }
        isConsigned: { type: boolean }
    ProductRequest:
      type: object
      required: [name, description, price, mainImageUrl, categoryId, stockQuantity, costPrice, isConsigned]
      properties:
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        mainImageUrl: { type: string, format: url }
        categoryId: { type: string }
        stockQuantity: { type: integer }
        supplierId: { type: string, nullable: true }
        costPrice: { type: number, format: double }
        isConsigned: { type: boolean }
    ProductResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        price: { type: number, format: double }
        mainImageUrl: { type:string, format: url }
        stockQuantity: { type: integer }
        supplierId: { type: string, nullable: true }
        costPrice: { type: number, format: double, nullable: true }
        isConsigned: { type: boolean }
        category: { $ref: '#/components/schemas/Category' }

    CartItemRequest:
      type: object
      required: [productId, cantidad]
      properties:
        productId: { type: string }
        cantidad: { type: integer, minimum: 1 }
    ShoppingCart:
      type: object
      properties:
        items: { type: array, items: { $ref: '#/components/schemas/CartItemRequest' } }

    Order:
      type: object
      properties:
        id: { type: string, format: uuid }
        usuarioId: { type: string, format: uuid }
        fechaPedido: { type: integer, format: int64, description: "UNIX Timestamp" }
        estado: { type: string }
        total: { type: number, format: double }
        items: { type: array, items: { $ref: '#/components/schemas/ItemPedido' } }
    ItemPedido:
      type: object
      properties:
        productId: { type: string }
        nombreProducto: { type: string }
        cantidad: { type: integer }
        precioUnitario: { type: number, format: double }