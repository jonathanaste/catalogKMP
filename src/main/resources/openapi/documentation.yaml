openapi: 3.0.3
info:
  title: "CatalogKMP API v3.0"
  description: "RESTful API for the CatalogKMP e-commerce platform, including all features for Phase 3 (Reseller Platform)."
  version: "3.0.0"
servers:
  - url: http://localhost:8080
    description: Local Development Server

tags:
  - name: Authentication
    description: "Endpoints for user registration and login."
  - name: Public Catalog
    description: "Public-facing endpoints for Browse products, categories, reviews, and questions."
  - name: Social Interaction
    description: "(Authenticated) Endpoints for posting reviews and questions."
  - name: Account Management
    description: "(Authenticated) Endpoints for managing user profiles, addresses, and wishlists."
  - name: Shopping Cart & Orders
    description: "(Authenticated) Endpoints for cart management, checkout, and order history."
  - name: Reseller Portal
    description: "(Reseller Role Required) Endpoints for resellers to manage their store, dashboard, and customers."
  - name: Administration
    description: "(Admin Role Required) Endpoints for managing products, categories, resellers, and marketing resources."

paths:
  # --- Authentication ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: "Register a new user with the 'CLIENT' role."
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/RegisterRequest' } }
      responses:
        '201': { description: "User created successfully.", content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '409': { $ref: '#/components/responses/Conflict' }

  /auth/login:
    post:
      tags: [Authentication]
      summary: "Login to obtain a JWT."
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/LoginRequest' } }
      responses:
        '200':
          description: "Login successful. Returns a JWT and the user's role."
          content:
            application/json:
              schema: { type: object, properties: { token: { type: string }, role: { type: string } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

    # --- Account Management ---
  /users/me:
    get:
      tags: [Account Management]
      summary: "Get the authenticated user's full profile."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "The user's complete profile, including addresses and reseller info."
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '401': { $ref: '#/components/responses/Unauthorized' }
    put:
      tags: [Account Management]
      summary: "Update the user's core profile information."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/UserProfileUpdateRequest' } }
      responses:
        '200':
          description: "User profile updated successfully."
        '401': { $ref: '#/components/responses/Unauthorized' }

  /users/me/addresses:
    get:
      tags: [Account Management]
      summary: "List the user's addresses."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of the user's saved addresses."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Address' } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
    post:
      tags: [Account Management]
      summary: "Add a new address."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddressRequest' } }
      responses:
        '201':
          description: "Address created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Address' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /wishlist:
    get:
      tags: [Account Management]
      summary: "Get the authenticated user's wishlist."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of wishlist items with full product details."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/WishlistResponse' } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /wishlist/add:
    post:
      tags: [Account Management]
      summary: "Add a product to the user's wishlist."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddToWishlistRequest' } }
      responses:
        '201': { description: "Item added successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /wishlist/remove:
    post:
      tags: [Account Management]
      summary: "Remove a product from the user's wishlist."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddToWishlistRequest' } }
      responses:
        '204': { description: "Item removed successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # --- Public Catalog & Social Interaction ---
  /products:
    get:
      tags: [Public Catalog]
      summary: "Get a list of all products."
      responses:
        '200':
          description: "A list of all available products."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ProductResponse' } } }

  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Public Catalog]
      summary: "Get a single product by its ID."
      responses:
        '200':
          description: "The requested product details."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ProductResponse' } }
        '404': { $ref: '#/components/responses/NotFound' }

  /products/{id}/reviews:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Public Catalog]
      summary: "Get all reviews for a specific product."
      responses:
        '200':
          description: "A list of reviews."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ProductReview' } } }
    post:
      tags: [Social Interaction]
      summary: "Post a new review for a product."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/ReviewRequest' } }
      responses:
        '201':
          description: "Review posted successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ProductReview' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /products/{productId}/questions:
    parameters:
      - name: productId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Public Catalog]
      summary: "Get all questions for a specific product."
      responses:
        '200':
          description: "A list of questions and their answers."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ProductQuestion' } } }
    post:
      tags: [Social Interaction]
      summary: "Post a new question for a product."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/QuestionRequest' } }
      responses:
        '201':
          description: "Question posted successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ProductQuestion' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # --- Shopping Cart & Orders ---
  /cart:
    get:
      tags: [Shopping Cart & Orders]
      summary: "Get the content of the user's cart."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200': { description: "Cart content.", content: { application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
    delete:
      tags: [Shopping Cart & Orders]
      summary: "Clear the user's cart."
      security: [ { "BearerAuth": [] } ]
      responses:
        '204': { description: "Cart cleared successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /cart/add:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Add an item to the cart."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CartItem' } }
      responses:
        '200': { description: "Cart updated.", content: { application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /cart/remove:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Remove an item from the cart."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CartItem' } }
      responses:
        '200': { description: "Cart updated.", content: { application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /orders/checkout:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Creates an order from the cart and returns a payment redirect URL."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CheckoutRequest' } }
      responses:
        '201':
          description: "Order created. The response contains the URL to redirect the user for payment."
          content:
            application/json:
              schema: { type: object, properties: { init_point: { type: string, format: url } } }
        '400': { description: "Cart is empty or address ID is missing." }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }

  # --- Reseller Portal Endpoints ---
  /reseller/me/store:
    get:
      tags: [Reseller Portal]
      summary: "Get the authenticated reseller's store details."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "The reseller's personal store information."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ResellerStoreResponse' } }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /reseller/me/dashboard:
    get:
      tags: [Reseller Portal]
      summary: "Get the authenticated reseller's dashboard statistics."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A summary of the reseller's sales and commission performance."
          content:
            application/json: { schema: { $ref: '#/components/schemas/ResellerDashboardResponse' } }
        '403': { $ref: '#/components/responses/Forbidden' }

  /reseller/me/customers:
    get:
      tags: [Reseller Portal]
      summary: "Get a list of the reseller's customers."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of customers who have purchased through the reseller's link."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/ResellerCustomer' } } }
        '403': { $ref: '#/components/responses/Forbidden' }

  /reseller/me/resources:
    get:
      tags: [Reseller Portal]
      summary: "Get available marketing resources."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of all available marketing materials."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/MarketingMaterial' } } }
        '403': { $ref: '#/components/responses/Forbidden' }

  # --- Administration Endpoints ---
  /admin/resellers:
    get:
      tags: [Administration]
      summary: "Get a list of all resellers."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of all users with the RESELLER role."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/User' } } }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      tags: [Administration]
      summary: "Create a new reseller."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/ResellerCreateRequest' } }
      responses:
        '201':
          description: "Reseller created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }

  /admin/resellers/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [Administration]
      summary: "Get a single reseller by their user ID."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "The reseller's user object."
          content:
            application/json: { schema: { $ref: '#/components/schemas/User' } }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Administration]
      summary: "Update a reseller's profile."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/ResellerUpdateRequest' } }
      responses:
        '200': { description: "Reseller updated successfully." }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [Administration]
      summary: "Delete a reseller."
      security: [ { "BearerAuth": [] } ]
      responses:
        '204': { description: "Reseller deleted successfully." }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /admin/resources:
    post:
      tags: [Administration]
      summary: "Add a new marketing resource."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/MarketingMaterialRequest' } }
      responses:
        '201':
          description: "Resource created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/MarketingMaterial' } }
        '403': { $ref: '#/components/responses/Forbidden' }

  /admin/resources/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    delete:
      tags: [Administration]
      summary: "Delete a marketing resource."
      security: [ { "BearerAuth": [] } ]
      responses:
        '204': { description: "Resource deleted successfully." }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: "Authentication information is missing or invalid."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    Forbidden:
      description: "Authenticated user does not have sufficient permissions."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    NotFound:
      description: "The requested resource could not be found."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
    Conflict:
      description: "The request could not be completed due to a conflict with the current state of the resource."
      content:
        application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }

  schemas:
    ErrorResponse:
      type: object
      properties:
        message: { type: string }

    # --- AUTH & USER ---
    RegisterRequest:
      type: object
      # ...
    LoginRequest:
      type: object
      # ...
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string, nullable: true }
        role: { type: string }
        addresses: { type: array, items: { $ref: '#/components/schemas/Address' } }
        resellerProfile:
          $ref: '#/components/schemas/ResellerProfile'
          nullable: true
    Address:
      type: object
      # ...

    # --- CATALOG ---
    ProductResponse:
      type: object
      # ...
    Category:
      type: object
      # ...
    ProductReview:
      type: object
      # ...
    ProductQuestion:
      type: object
      # ...
    ReviewRequest:
      type: object
      # ...
    QuestionRequest:
      type: object
      # ...

    # --- CART & ORDER ---
    ShoppingCart:
      type: object
      # ...
    CartItem:
      type: object
      # ...
    CheckoutRequest:
      type: object
      # ...
    Order:
      type: object
      # ...

    # --- PHASE 3: RESELLER ---
    ResellerProfile:
      type: object
      properties:
        userId: { type: string }
        uniqueStoreSlug: { type: string }
        commissionRate: { type: number, format: double }
        isActive: { type: boolean }

    ResellerCreateRequest:
      type: object
      required: [email, firstName, lastName, uniqueStoreSlug]
      properties:
        email: { type: string, format: email }
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string, nullable: true }
        uniqueStoreSlug: { type: string }
        commissionRate: { type: number, format: double, nullable: true, default: 20.0 }

    ResellerUpdateRequest:
      type: object
      required: [uniqueStoreSlug, commissionRate, isActive]
      properties:
        uniqueStoreSlug: { type: string }
        commissionRate: { type: number, format: double }
        isActive: { type: boolean }

    ResellerStoreResponse:
      type: object
      properties:
        resellerName: { type: string }
        uniqueStoreSlug: { type: string }
        storeUrl: { type: string, format: uri }
        commissionRate: { type: number, format: double }
        isActive: { type: boolean }

    ResellerDashboardResponse:
      type: object
      properties:
        totalSalesValue: { type: number, format: double }
        totalCommissionEarned: { type: number, format: double }
        attributedOrderCount: { type: integer }
        salesInCurrentMonth: { type: number, format: double }
        commissionInCurrentMonth: { type: number, format: double }
        recentOrders:
          type: array
          items:
            $ref: '#/components/schemas/SimpleOrderSummary'

    SimpleOrderSummary:
      type: object
      properties:
        orderId: { type: string }
        orderDate: { type: integer, format: int64 }
        orderTotal: { type: number, format: double }
        commissionEarned: { type: number, format: double }
        status: { type: string }

    ResellerCustomer:
      type: object
      properties:
        customerId: { type: string }
        customerName: { type: string }
        customerEmail: { type: string, format: email }
        firstPurchaseDate: { type: integer, format: int64 }
        totalSpent: { type: number, format: double }

    MarketingMaterial:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string, nullable: true }
        assetUrl: { type: string, format: uri }
        assetType: { type: string, enum: [IMAGE, BANNER, PDF] }
        dateAdded: { type: integer, format: int64 }

    MarketingMaterialRequest:
      type: object
      required: [title, assetUrl, assetType]
      properties:
        title: { type: string }
        description: { type: string, nullable: true }
        assetUrl: { type: string, format: uri }
        assetType: { type: string, enum: [IMAGE, BANNER, PDF] }