openapi: 3.0.3
info:
  title: "CatalogKMP API v2.0"
  description: "RESTful API for the CatalogKMP e-commerce platform, including all features for Phase 2 (Community & Specialization)."
  version: "2.0.0"
servers:
  - url: http://localhost:8080
    description: Local Development Server

tags:
  - name: Authentication
    description: "Endpoints for user registration and login."
  - name: Public Catalog
    description: "Public-facing endpoints for Browse products, categories, reviews, and questions."
  - name: Account Management
    description: "(Authenticated) Endpoints for managing user profiles, addresses, and wishlists."
  - name: Shopping Cart & Orders
    description: "(Authenticated) Endpoints for cart management, checkout, and order history."
  - name: Social Interaction
    description: "(Authenticated) Endpoints for posting reviews and questions."
  - name: Administration
    description: "(Admin Role Required) Endpoints for managing products, categories, suppliers, and coupons."

paths:
  # --- Authentication ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: "Register a new user with the 'CLIENT' role."
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/RegisterRequest' } }
      responses:
        '201': { description: "User created successfully.", content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '409': { $ref: '#/components/responses/Conflict' }

  /auth/login:
    post:
      tags: [Authentication]
      summary: "Login to obtain a JWT."
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/LoginRequest' } }
      responses:
        '200':
          description: "Login successful. Returns a JWT and the user's role."
          content:
            application/json:
              schema: { type: object, properties: { token: { type: string }, role: { type: string } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # --- Public Catalog (omitted for brevity, no changes) ---
  # ... /products, /categories etc. ...

  # --- Account Management ---
  # ... /users/me, /users/me/addresses etc. ...

  /wishlist:
    get:
      tags: [Account Management]
      summary: "Get the authenticated user's wishlist."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of wishlist items with full product details."
          content:
            application/json: { schema: { type: array, items: { $ref: '#/components/schemas/WishlistResponse' } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /wishlist/add:
    post:
      tags: [Account Management]
      summary: "Add a product to the user's wishlist."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddToWishlistRequest' } }
      responses:
        '201': { description: "Item added successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /wishlist/remove:
    post:
      tags: [Account Management]
      summary: "Remove a product from the user's wishlist."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/AddToWishlistRequest' } }
      responses:
        '204': { description: "Item removed successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }

  # --- Shopping Cart & Orders ---
  /cart:
    get:
      tags: [Shopping Cart & Orders]
      summary: "Get the content of the user's cart."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200': { description: "Cart content.", content: { application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
    delete:
      tags: [Shopping Cart & Orders]
      summary: "Clear the user's cart."
      security: [ { "BearerAuth": [] } ]
      responses:
        '204': { description: "Cart cleared successfully." }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /cart/add:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Add an item to the cart."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CartItem' } }
      responses:
        '200': { description: "Cart updated.", content: { application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /cart/remove:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Remove an item from the cart."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CartItem' } }
      responses:
        '200': { description: "Cart updated.", content: { application/json: { schema: { $ref: '#/components/schemas/ShoppingCart' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /orders/checkout:
    post:
      tags: [Shopping Cart & Orders]
      summary: "Creates an order from the cart and returns a payment redirect URL."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CheckoutRequest' } }
      responses:
        '201':
          description: "Order created. The response contains the URL to redirect the user for payment."
          content:
            application/json:
              schema: { type: object, properties: { init_point: { type: string, format: url } } }
        '400': { description: "Cart is empty or address ID is missing." }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }

  # ... /orders, /orders/{id} etc. ...

  # --- Administration ---
  # ... /admin/suppliers, /admin/products etc. ...

  /admin/coupons:
    get:
      tags: [Administration]
      summary: "Get all discount coupons."
      security: [ { "BearerAuth": [] } ]
      responses:
        '200':
          description: "A list of all coupons."
          content:
            application/json: { type: array, items: { $ref: '#/components/schemas/Coupon' } }
        '403': { $ref: '#/components/responses/Forbidden' }
    post:
      tags: [Administration]
      summary: "Create a new discount coupon."
      security: [ { "BearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json: { schema: { $ref: '#/components/schemas/CouponCreateRequest' } }
      responses:
        '201':
          description: "Coupon created successfully."
          content:
            application/json: { schema: { $ref: '#/components/schemas/Coupon' } }
        '403': { $ref: '#/components/responses/Forbidden' }

components:
  # ... securitySchemes, responses ...

  schemas:
    # ... ErrorResponse, User, Product etc. ...

    Order:
      type: object
      properties:
        # ... other order properties
        items: { type: array, items: { $ref: '#/components/schemas/OrderItem' } }
        couponCode: { type: string, nullable: true, description: "The coupon code applied to the order." }
        discountAmount: { type: number, format: double, nullable: true, description: "The monetary value of the discount applied." }

    CheckoutRequest:
      type: object
      required: [addressId]
      properties:
        addressId: { type: string, description: "The ID of the address to ship to." }
        couponCode: { type: string, nullable: true, description: "An optional discount coupon code." }

    # --- NEW SCHEMAS ---
    WishlistResponse:
      type: object
      properties:
        product: { $ref: '#/components/schemas/Product' }
        dateAdded: { type: integer, format: int64, description: "UNIX Timestamp of when the item was added." }

    AddToWishlistRequest:
      type: object
      required: [productId]
      properties:
        productId: { type: string }

    Coupon:
      type: object
      properties:
        code: { type: string }
        description: { type: string }
        discountType: { type: string, enum: [PERCENTAGE, FIXED_AMOUNT] }
        discountValue: { type: number, format: double }
        expirationDate: { type: integer, format: int64, nullable: true }
        isActive: { type: boolean }

    CouponCreateRequest:
      type: object
      required: [code, description, discountType, discountValue]
      properties:
        code: { type: string }
        description: { type: string }
        discountType: { type: string, enum: [PERCENTAGE, FIXED_AMOUNT] }
        discountValue: { type: number, format: double }
        expirationDate: { type: integer, format: int64, nullable: true }
        usageLimit: { type: integer, nullable: true }